Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     program -> empty
Rule 3     statements -> statements 
 statement
Rule 4     statements -> statement
Rule 5     empty -> <empty>
Rule 6     statement -> sequence_assignment
Rule 7     statement -> expression_statement
Rule 8     sequence_assignment -> variable ( expression ) = expression
Rule 9     expression_statement -> expression
Rule 10    expression -> arith_expr
Rule 11    arith_expr -> term + arith_expr
Rule 12    arith_expr -> term - arith_expr
Rule 13    arith_expr -> term
Rule 14    term -> factor * term
Rule 15    term -> factor / term
Rule 16    term -> factor % term
Rule 17    term -> factor term
Rule 18    term -> factor
Rule 19    factor -> - factor
Rule 20    factor -> power
Rule 21    power -> atom ^ factor
Rule 22    power -> atom
Rule 23    atom -> variable
Rule 24    atom -> number
Rule 25    atom -> function_call
Rule 26    variable -> IDENTIFIER
Rule 27    number -> NUMBER
Rule 28    function_call -> variable ( expression )

Terminals, with rules where they appear


                    : 3
%                    : 16
(                    : 8 28
)                    : 8 28
*                    : 14
+                    : 11
-                    : 12 19
/                    : 15
=                    : 8
IDENTIFIER           : 26
NUMBER               : 27
^                    : 21
error                : 

Nonterminals, with rules where they appear

arith_expr           : 10 11 12
atom                 : 21 22
empty                : 2
expression           : 8 8 9 28
expression_statement : 7
factor               : 14 15 16 17 18 19 21
function_call        : 25
number               : 24
power                : 20
program              : 0
sequence_assignment  : 6
statement            : 3 4
statements           : 1 3
term                 : 11 12 13 14 15 16 17
variable             : 8 23 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) program -> . empty
    (3) statements -> . statements 
 statement
    (4) statements -> . statement
    (5) empty -> .
    (6) statement -> . sequence_assignment
    (7) statement -> . expression_statement
    (8) sequence_assignment -> . variable ( expression ) = expression
    (9) expression_statement -> . expression
    (26) variable -> . IDENTIFIER
    (10) expression -> . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    $end            reduce using rule 5 (empty -> .)
    IDENTIFIER      shift and go to state 7
    -               shift and go to state 3
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    power                          shift and go to state 2
    arith_expr                     shift and go to state 8
    program                        shift and go to state 9
    variable                       shift and go to state 10
    expression                     shift and go to state 11
    function_call                  shift and go to state 12
    statement                      shift and go to state 4
    term                           shift and go to state 13
    expression_statement           shift and go to state 15
    atom                           shift and go to state 16
    empty                          shift and go to state 5
    number                         shift and go to state 1
    sequence_assignment            shift and go to state 17
    statements                     shift and go to state 18

state 1

    (24) atom -> number .

    ^               reduce using rule 24 (atom -> number .)
    *               reduce using rule 24 (atom -> number .)
    /               reduce using rule 24 (atom -> number .)
    %               reduce using rule 24 (atom -> number .)
    -               reduce using rule 24 (atom -> number .)
    IDENTIFIER      reduce using rule 24 (atom -> number .)
    NUMBER          reduce using rule 24 (atom -> number .)
    +               reduce using rule 24 (atom -> number .)
    
               reduce using rule 24 (atom -> number .)
    $end            reduce using rule 24 (atom -> number .)
    )               reduce using rule 24 (atom -> number .)


state 2

    (20) factor -> power .

    *               reduce using rule 20 (factor -> power .)
    /               reduce using rule 20 (factor -> power .)
    %               reduce using rule 20 (factor -> power .)
    -               reduce using rule 20 (factor -> power .)
    IDENTIFIER      reduce using rule 20 (factor -> power .)
    NUMBER          reduce using rule 20 (factor -> power .)
    +               reduce using rule 20 (factor -> power .)
    
               reduce using rule 20 (factor -> power .)
    $end            reduce using rule 20 (factor -> power .)
    )               reduce using rule 20 (factor -> power .)


state 3

    (19) factor -> - . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 19
    atom                           shift and go to state 16
    number                         shift and go to state 1
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    power                          shift and go to state 2

state 4

    (4) statements -> statement .

    
               reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)


state 5

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 6

    (14) term -> factor . * term
    (15) term -> factor . / term
    (16) term -> factor . % term
    (17) term -> factor . term
    (18) term -> factor .
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

  ! shift/reduce conflict for - resolved as shift
    *               shift and go to state 21
    /               shift and go to state 23
    %               shift and go to state 24
    +               reduce using rule 18 (term -> factor .)
    
               reduce using rule 18 (term -> factor .)
    $end            reduce using rule 18 (term -> factor .)
    )               reduce using rule 18 (term -> factor .)
    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

  ! -               [ reduce using rule 18 (term -> factor .) ]

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    power                          shift and go to state 2
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 22

state 7

    (26) variable -> IDENTIFIER .

    (               reduce using rule 26 (variable -> IDENTIFIER .)
    ^               reduce using rule 26 (variable -> IDENTIFIER .)
    *               reduce using rule 26 (variable -> IDENTIFIER .)
    /               reduce using rule 26 (variable -> IDENTIFIER .)
    %               reduce using rule 26 (variable -> IDENTIFIER .)
    -               reduce using rule 26 (variable -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 26 (variable -> IDENTIFIER .)
    NUMBER          reduce using rule 26 (variable -> IDENTIFIER .)
    +               reduce using rule 26 (variable -> IDENTIFIER .)
    
               reduce using rule 26 (variable -> IDENTIFIER .)
    $end            reduce using rule 26 (variable -> IDENTIFIER .)
    )               reduce using rule 26 (variable -> IDENTIFIER .)


state 8

    (10) expression -> arith_expr .

    
               reduce using rule 10 (expression -> arith_expr .)
    $end            reduce using rule 10 (expression -> arith_expr .)
    )               reduce using rule 10 (expression -> arith_expr .)


state 9

    (0) S' -> program .



state 10

    (8) sequence_assignment -> variable . ( expression ) = expression
    (23) atom -> variable .
    (28) function_call -> variable . ( expression )

    (               shift and go to state 25
    ^               reduce using rule 23 (atom -> variable .)
    *               reduce using rule 23 (atom -> variable .)
    /               reduce using rule 23 (atom -> variable .)
    %               reduce using rule 23 (atom -> variable .)
    -               reduce using rule 23 (atom -> variable .)
    IDENTIFIER      reduce using rule 23 (atom -> variable .)
    NUMBER          reduce using rule 23 (atom -> variable .)
    +               reduce using rule 23 (atom -> variable .)
    
               reduce using rule 23 (atom -> variable .)
    $end            reduce using rule 23 (atom -> variable .)


state 11

    (9) expression_statement -> expression .

    
               reduce using rule 9 (expression_statement -> expression .)
    $end            reduce using rule 9 (expression_statement -> expression .)


state 12

    (25) atom -> function_call .

    ^               reduce using rule 25 (atom -> function_call .)
    *               reduce using rule 25 (atom -> function_call .)
    /               reduce using rule 25 (atom -> function_call .)
    %               reduce using rule 25 (atom -> function_call .)
    -               reduce using rule 25 (atom -> function_call .)
    IDENTIFIER      reduce using rule 25 (atom -> function_call .)
    NUMBER          reduce using rule 25 (atom -> function_call .)
    +               reduce using rule 25 (atom -> function_call .)
    
               reduce using rule 25 (atom -> function_call .)
    $end            reduce using rule 25 (atom -> function_call .)
    )               reduce using rule 25 (atom -> function_call .)


state 13

    (11) arith_expr -> term . + arith_expr
    (12) arith_expr -> term . - arith_expr
    (13) arith_expr -> term .

    +               shift and go to state 27
    -               shift and go to state 26
    )               reduce using rule 13 (arith_expr -> term .)
    
               reduce using rule 13 (arith_expr -> term .)
    $end            reduce using rule 13 (arith_expr -> term .)


state 14

    (27) number -> NUMBER .

    ^               reduce using rule 27 (number -> NUMBER .)
    *               reduce using rule 27 (number -> NUMBER .)
    /               reduce using rule 27 (number -> NUMBER .)
    %               reduce using rule 27 (number -> NUMBER .)
    -               reduce using rule 27 (number -> NUMBER .)
    IDENTIFIER      reduce using rule 27 (number -> NUMBER .)
    NUMBER          reduce using rule 27 (number -> NUMBER .)
    +               reduce using rule 27 (number -> NUMBER .)
    
               reduce using rule 27 (number -> NUMBER .)
    $end            reduce using rule 27 (number -> NUMBER .)
    )               reduce using rule 27 (number -> NUMBER .)


state 15

    (7) statement -> expression_statement .

    
               reduce using rule 7 (statement -> expression_statement .)
    $end            reduce using rule 7 (statement -> expression_statement .)


state 16

    (21) power -> atom . ^ factor
    (22) power -> atom .

    ^               shift and go to state 28
    *               reduce using rule 22 (power -> atom .)
    /               reduce using rule 22 (power -> atom .)
    %               reduce using rule 22 (power -> atom .)
    -               reduce using rule 22 (power -> atom .)
    IDENTIFIER      reduce using rule 22 (power -> atom .)
    NUMBER          reduce using rule 22 (power -> atom .)
    +               reduce using rule 22 (power -> atom .)
    
               reduce using rule 22 (power -> atom .)
    $end            reduce using rule 22 (power -> atom .)
    )               reduce using rule 22 (power -> atom .)


state 17

    (6) statement -> sequence_assignment .

    
               reduce using rule 6 (statement -> sequence_assignment .)
    $end            reduce using rule 6 (statement -> sequence_assignment .)


state 18

    (1) program -> statements .
    (3) statements -> statements . 
 statement

    $end            reduce using rule 1 (program -> statements .)
    
               shift and go to state 29


state 19

    (19) factor -> - factor .

    *               reduce using rule 19 (factor -> - factor .)
    /               reduce using rule 19 (factor -> - factor .)
    %               reduce using rule 19 (factor -> - factor .)
    -               reduce using rule 19 (factor -> - factor .)
    IDENTIFIER      reduce using rule 19 (factor -> - factor .)
    NUMBER          reduce using rule 19 (factor -> - factor .)
    +               reduce using rule 19 (factor -> - factor .)
    
               reduce using rule 19 (factor -> - factor .)
    $end            reduce using rule 19 (factor -> - factor .)
    )               reduce using rule 19 (factor -> - factor .)


state 20

    (23) atom -> variable .
    (28) function_call -> variable . ( expression )

    ^               reduce using rule 23 (atom -> variable .)
    *               reduce using rule 23 (atom -> variable .)
    /               reduce using rule 23 (atom -> variable .)
    %               reduce using rule 23 (atom -> variable .)
    -               reduce using rule 23 (atom -> variable .)
    IDENTIFIER      reduce using rule 23 (atom -> variable .)
    NUMBER          reduce using rule 23 (atom -> variable .)
    +               reduce using rule 23 (atom -> variable .)
    
               reduce using rule 23 (atom -> variable .)
    $end            reduce using rule 23 (atom -> variable .)
    )               reduce using rule 23 (atom -> variable .)
    (               shift and go to state 30


state 21

    (14) term -> factor * . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    power                          shift and go to state 2
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 31

state 22

    (17) term -> factor term .

    +               reduce using rule 17 (term -> factor term .)
    -               reduce using rule 17 (term -> factor term .)
    
               reduce using rule 17 (term -> factor term .)
    $end            reduce using rule 17 (term -> factor term .)
    )               reduce using rule 17 (term -> factor term .)


state 23

    (15) term -> factor / . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    power                          shift and go to state 2
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 32

state 24

    (16) term -> factor % . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    power                          shift and go to state 2
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 33

state 25

    (8) sequence_assignment -> variable ( . expression ) = expression
    (28) function_call -> variable ( . expression )
    (10) expression -> . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    arith_expr                     shift and go to state 8
    power                          shift and go to state 2
    variable                       shift and go to state 20
    expression                     shift and go to state 34
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 13

state 26

    (12) arith_expr -> term - . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    arith_expr                     shift and go to state 35
    power                          shift and go to state 2
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 13

state 27

    (11) arith_expr -> term + . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    arith_expr                     shift and go to state 36
    power                          shift and go to state 2
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 13

state 28

    (21) power -> atom ^ . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 37
    atom                           shift and go to state 16
    number                         shift and go to state 1
    variable                       shift and go to state 20
    function_call                  shift and go to state 12
    power                          shift and go to state 2

state 29

    (3) statements -> statements 
 . statement
    (6) statement -> . sequence_assignment
    (7) statement -> . expression_statement
    (8) sequence_assignment -> . variable ( expression ) = expression
    (9) expression_statement -> . expression
    (26) variable -> . IDENTIFIER
    (10) expression -> . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    IDENTIFIER      shift and go to state 7
    -               shift and go to state 3
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    arith_expr                     shift and go to state 8
    power                          shift and go to state 2
    variable                       shift and go to state 10
    expression                     shift and go to state 11
    function_call                  shift and go to state 12
    term                           shift and go to state 13
    expression_statement           shift and go to state 15
    atom                           shift and go to state 16
    statement                      shift and go to state 38
    number                         shift and go to state 1
    sequence_assignment            shift and go to state 17

state 30

    (28) function_call -> variable ( . expression )
    (10) expression -> . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    arith_expr                     shift and go to state 8
    power                          shift and go to state 2
    variable                       shift and go to state 20
    expression                     shift and go to state 39
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 13

state 31

    (14) term -> factor * term .

    +               reduce using rule 14 (term -> factor * term .)
    -               reduce using rule 14 (term -> factor * term .)
    
               reduce using rule 14 (term -> factor * term .)
    $end            reduce using rule 14 (term -> factor * term .)
    )               reduce using rule 14 (term -> factor * term .)


state 32

    (15) term -> factor / term .

    +               reduce using rule 15 (term -> factor / term .)
    -               reduce using rule 15 (term -> factor / term .)
    
               reduce using rule 15 (term -> factor / term .)
    $end            reduce using rule 15 (term -> factor / term .)
    )               reduce using rule 15 (term -> factor / term .)


state 33

    (16) term -> factor % term .

    +               reduce using rule 16 (term -> factor % term .)
    -               reduce using rule 16 (term -> factor % term .)
    
               reduce using rule 16 (term -> factor % term .)
    $end            reduce using rule 16 (term -> factor % term .)
    )               reduce using rule 16 (term -> factor % term .)


state 34

    (8) sequence_assignment -> variable ( expression . ) = expression
    (28) function_call -> variable ( expression . )

    )               shift and go to state 40


state 35

    (12) arith_expr -> term - arith_expr .

    )               reduce using rule 12 (arith_expr -> term - arith_expr .)
    
               reduce using rule 12 (arith_expr -> term - arith_expr .)
    $end            reduce using rule 12 (arith_expr -> term - arith_expr .)


state 36

    (11) arith_expr -> term + arith_expr .

    )               reduce using rule 11 (arith_expr -> term + arith_expr .)
    
               reduce using rule 11 (arith_expr -> term + arith_expr .)
    $end            reduce using rule 11 (arith_expr -> term + arith_expr .)


state 37

    (21) power -> atom ^ factor .

    *               reduce using rule 21 (power -> atom ^ factor .)
    /               reduce using rule 21 (power -> atom ^ factor .)
    %               reduce using rule 21 (power -> atom ^ factor .)
    -               reduce using rule 21 (power -> atom ^ factor .)
    IDENTIFIER      reduce using rule 21 (power -> atom ^ factor .)
    NUMBER          reduce using rule 21 (power -> atom ^ factor .)
    +               reduce using rule 21 (power -> atom ^ factor .)
    
               reduce using rule 21 (power -> atom ^ factor .)
    $end            reduce using rule 21 (power -> atom ^ factor .)
    )               reduce using rule 21 (power -> atom ^ factor .)


state 38

    (3) statements -> statements 
 statement .

    
               reduce using rule 3 (statements -> statements 
 statement .)
    $end            reduce using rule 3 (statements -> statements 
 statement .)


state 39

    (28) function_call -> variable ( expression . )

    )               shift and go to state 41


state 40

    (8) sequence_assignment -> variable ( expression ) . = expression
    (28) function_call -> variable ( expression ) .

    =               shift and go to state 42
    ^               reduce using rule 28 (function_call -> variable ( expression ) .)
    *               reduce using rule 28 (function_call -> variable ( expression ) .)
    /               reduce using rule 28 (function_call -> variable ( expression ) .)
    %               reduce using rule 28 (function_call -> variable ( expression ) .)
    -               reduce using rule 28 (function_call -> variable ( expression ) .)
    IDENTIFIER      reduce using rule 28 (function_call -> variable ( expression ) .)
    NUMBER          reduce using rule 28 (function_call -> variable ( expression ) .)
    +               reduce using rule 28 (function_call -> variable ( expression ) .)
    
               reduce using rule 28 (function_call -> variable ( expression ) .)
    $end            reduce using rule 28 (function_call -> variable ( expression ) .)


state 41

    (28) function_call -> variable ( expression ) .

    ^               reduce using rule 28 (function_call -> variable ( expression ) .)
    *               reduce using rule 28 (function_call -> variable ( expression ) .)
    /               reduce using rule 28 (function_call -> variable ( expression ) .)
    %               reduce using rule 28 (function_call -> variable ( expression ) .)
    -               reduce using rule 28 (function_call -> variable ( expression ) .)
    IDENTIFIER      reduce using rule 28 (function_call -> variable ( expression ) .)
    NUMBER          reduce using rule 28 (function_call -> variable ( expression ) .)
    +               reduce using rule 28 (function_call -> variable ( expression ) .)
    
               reduce using rule 28 (function_call -> variable ( expression ) .)
    $end            reduce using rule 28 (function_call -> variable ( expression ) .)
    )               reduce using rule 28 (function_call -> variable ( expression ) .)


state 42

    (8) sequence_assignment -> variable ( expression ) = . expression
    (10) expression -> . arith_expr
    (11) arith_expr -> . term + arith_expr
    (12) arith_expr -> . term - arith_expr
    (13) arith_expr -> . term
    (14) term -> . factor * term
    (15) term -> . factor / term
    (16) term -> . factor % term
    (17) term -> . factor term
    (18) term -> . factor
    (19) factor -> . - factor
    (20) factor -> . power
    (21) power -> . atom ^ factor
    (22) power -> . atom
    (23) atom -> . variable
    (24) atom -> . number
    (25) atom -> . function_call
    (26) variable -> . IDENTIFIER
    (27) number -> . NUMBER
    (28) function_call -> . variable ( expression )

    -               shift and go to state 3
    IDENTIFIER      shift and go to state 7
    NUMBER          shift and go to state 14

    factor                         shift and go to state 6
    atom                           shift and go to state 16
    arith_expr                     shift and go to state 8
    power                          shift and go to state 2
    variable                       shift and go to state 20
    expression                     shift and go to state 43
    function_call                  shift and go to state 12
    number                         shift and go to state 1
    term                           shift and go to state 13

state 43

    (8) sequence_assignment -> variable ( expression ) = expression .

    
               reduce using rule 8 (sequence_assignment -> variable ( expression ) = expression .)
    $end            reduce using rule 8 (sequence_assignment -> variable ( expression ) = expression .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for - in state 6 resolved as shift
