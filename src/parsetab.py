
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'\xd11`\x87\xdf\xae\x9d(\x0e\xe4\xe9h\x92\xd5h\xf2'
    
_lr_action_items = {'NUMBER':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[1,1,1,1,1,1,1,1,1,1,1,1,1,]),'+':([1,2,3,5,10,12,13,16,18,19,20,31,32,33,34,41,42,],[-27,-24,-20,-26,-18,-22,25,-25,-23,-19,-23,-17,-15,-16,-21,-28,-28,]),')':([1,2,3,5,10,12,13,15,16,19,20,31,32,33,34,35,36,39,40,42,],[-27,-24,-20,-26,-18,-22,-14,-11,-25,-19,-23,-17,-15,-16,-21,-12,-13,41,42,-28,]),'IDENTIFIER':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'=':([41,],[43,]),'$end':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,31,32,33,34,35,36,37,38,41,42,44,],[-6,-27,-24,-20,-2,-26,-5,0,-8,-18,-10,-22,-14,-7,-11,-25,-1,-23,-19,-23,-17,-15,-16,-21,-12,-13,-4,-3,-28,-28,-9,]),'%':([1,2,3,5,10,12,16,18,19,20,34,41,42,],[-27,-24,-20,-26,21,-22,-25,-23,-19,-23,-21,-28,-28,]),';':([1,2,3,5,6,9,10,11,12,13,14,15,16,17,18,19,20,31,32,33,34,35,36,37,38,41,42,44,],[-27,-24,-20,-26,-5,-8,-18,-10,-22,-14,-7,-11,-25,27,-23,-19,-23,-17,-15,-16,-21,-12,-13,-4,-3,-28,-28,-9,]),'*':([1,2,3,5,10,12,16,18,19,20,34,41,42,],[-27,-24,-20,-26,22,-22,-25,-23,-19,-23,-21,-28,-28,]),'-':([0,1,2,3,5,7,10,12,13,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,41,42,43,],[7,-27,-24,-20,-26,7,-18,-22,26,-25,-23,-19,-23,7,7,7,7,7,7,7,7,7,7,-17,-15,-16,-21,-28,-28,7,]),'^':([1,2,5,12,16,18,20,41,42,],[-27,-24,-26,24,-25,-23,-23,-28,-28,]),'\n':([1,2,3,5,6,9,10,11,12,13,14,15,16,17,18,19,20,31,32,33,34,35,36,37,38,41,42,44,],[-27,-24,-20,-26,-5,-8,-18,-10,-22,-14,-7,-11,-25,28,-23,-19,-23,-17,-15,-16,-21,-12,-13,-4,-3,-28,-28,-9,]),'(':([5,18,20,],[-26,29,30,]),'/':([1,2,3,5,10,12,16,18,19,20,34,41,42,],[-27,-24,-20,-26,23,-22,-25,-23,-19,-23,-21,-28,-28,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'number':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[2,2,2,2,2,2,2,2,2,2,2,2,2,]),'factor':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[10,19,10,10,10,34,10,10,10,10,10,10,10,]),'expression':([0,27,28,29,30,43,],[11,11,11,39,40,44,]),'term':([0,21,22,23,25,26,27,28,29,30,43,],[13,31,32,33,13,13,13,13,13,13,13,]),'empty':([0,],[4,]),'sequence_assignment':([0,27,28,],[14,14,14,]),'program':([0,],[8,]),'arith_expr':([0,25,26,27,28,29,30,43,],[15,35,36,15,15,15,15,15,]),'atom':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'variable':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[18,20,20,20,20,20,20,20,18,18,20,20,20,]),'statement':([0,27,28,],[6,37,38,]),'function_call':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'power':([0,7,21,22,23,24,25,26,27,28,29,30,43,],[3,3,3,3,3,3,3,3,3,3,3,3,3,]),'statements':([0,],[17,]),'expression_statement':([0,27,28,],[9,9,9,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',31),
  ('program -> empty','program',1,'p_program','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',32),
  ('statements -> statements \n statement','statements',3,'p_statements','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',37),
  ('statements -> statements ; statement','statements',3,'p_statements','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',38),
  ('statements -> statement','statements',1,'p_statements','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',39),
  ('empty -> <empty>','empty',0,'p_empty','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',47),
  ('statement -> sequence_assignment','statement',1,'p_statement','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',51),
  ('statement -> expression_statement','statement',1,'p_statement','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',52),
  ('sequence_assignment -> variable ( expression ) = expression','sequence_assignment',6,'p_sequence_assignment','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',56),
  ('expression_statement -> expression','expression_statement',1,'p_expression_statement','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',60),
  ('expression -> arith_expr','expression',1,'p_expression','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',64),
  ('arith_expr -> term + arith_expr','arith_expr',3,'p_arith_expr','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',68),
  ('arith_expr -> term - arith_expr','arith_expr',3,'p_arith_expr','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',69),
  ('arith_expr -> term','arith_expr',1,'p_arith_expr','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',70),
  ('term -> factor * term','term',3,'p_term','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',79),
  ('term -> factor / term','term',3,'p_term','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',80),
  ('term -> factor % term','term',3,'p_term','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',81),
  ('term -> factor','term',1,'p_term','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',82),
  ('factor -> - factor','factor',2,'p_factor','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',91),
  ('factor -> power','factor',1,'p_factor','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',92),
  ('power -> atom ^ factor','power',3,'p_power','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',99),
  ('power -> atom','power',1,'p_power','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',100),
  ('atom -> variable','atom',1,'p_atom','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',107),
  ('atom -> number','atom',1,'p_atom','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',108),
  ('atom -> function_call','atom',1,'p_atom','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',109),
  ('variable -> IDENTIFIER','variable',1,'p_variable','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',113),
  ('number -> NUMBER','number',1,'p_number','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',117),
  ('function_call -> variable ( expression )','function_call',4,'p_function_call','C:\\Users\\Kevin\\Desktop\\Codegolf\\Sequencer\\src\\s_parser.py',121),
]
